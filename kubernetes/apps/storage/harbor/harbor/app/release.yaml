apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: harbor
spec:
  interval: 30m
  timeout: 5m
  chart:
    spec:
      chart: harbor
      version: 1.17.2
      sourceRef:
        kind: HelmRepository
        name: harbor
        namespace: flux-system
  maxHistory: 2
  install:
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    updateStrategy:
      type: Recreate
    existingSecretAdminPassword: harbor-secret
    externalURL: https://harbor.icylair.com
    expose:
      tls:
        enabled: true
        # # tls certificate is configured in the ingress controller, choose this option
        certSource: secret
        secret: 
          secretName: "icylair-com-all-prod"
      ingress:
        ingressClassName: traefik-external
        hosts: 
          core: harbor.icylair.com
        # annotations:
        #   traefik.ingress.kubernetes.io/router.middlewares: network-forward-auth@kubernetescrd
    persistence:
      enabled: true ##temp
      resourcePolicy: ""
      persistentVolumeClaim:
        registry:
          existingClaim: "harbor-data"
          subPath: "registry"
        jobservice:
          jobLog:
            existingClaim: "harbor-data"
            subPath: "jobservice"
        database: # TODO not work, droping it and using manual db
          existingClaim: "harbor-data"
          subPath: "database"
          # accessMode: "ReadWriteOnce"
          # storageClass: "longhorn-storage-im"
        redis:
          existingClaim: "harbor-data"
          subPath: "redis"
        trivy:
          existingClaim: "harbor-data"
          subPath: "trivy"
      imageChartStorage:
        disableredirect: true
        type: s3
        s3:
          # Set an existing secret for S3 accesskey and secretkey
          # keys in the secret should be REGISTRY_STORAGE_S3_ACCESSKEY and REGISTRY_STORAGE_S3_SECRETKEY for registry
          existingSecret: "harbor-secret"
          region: us-west-1
          bucket: harbor
          regionendpoint: http://wireguard.network.svc.cluster.local:9010
          #encrypt: false
          #keyid: mykeyid
          #secure: true
          #skipverify: false
          #v4auth: true
          #chunksize: "5242880"
          rootdirectory: /
          #storageclass: STANDARD
          #multipartcopychunksize: "33554432"
          #multipartcopymaxconcurrency: 100
          #multipartcopythresholdsize: "33554432"
            
    tolerations-and-nodelectors: &tolerations-and-nodelectors
      # tolerations: 
      #   - key: node-role.kubernetes.io/master
      #     value: "true"
      #     effect: NoSchedule
      nodeSelector:
        kubernetes.io/arch: amd64
    portal:
      <<: *tolerations-and-nodelectors
    core:
      <<: *tolerations-and-nodelectors
    jobservice:
      <<: *tolerations-and-nodelectors
    registry:
      <<: *tolerations-and-nodelectors
    trivy:
      enabled: false
      <<: *tolerations-and-nodelectors
    database:
      # type: external
      # external:
      #   host: "harbor-postgres-postgresql"
      #   port: "5432"
      #   username: "user"
      #   coreDatabase: "registry"
      #   # if using existing secret, the key must be "password"
      #   existingSecret: "harbor-secret"
      #   # "disable" - No SSL
      #   # "require" - Always SSL (skip verification)
      #   # "verify-ca" - Always SSL (verify that the certificate presented by the
      #   # server was signed by a trusted CA)
      #   # "verify-full" - Always SSL (verify that the certification presented by the
      #   # server was signed by a trusted CA and the server host name matches the one
      #   # in the certificate)
      #   sslmode: "disable"
      type: internal
      internal:
        <<: *tolerations-and-nodelectors
        extrInitContainers: 
          - name: init-chmod-data
            image: docker.io/bitnami/os-shell:12-debian-12-r26
            imagePullPolicy: "IfNotPresent"
            resources:
              limits:
                cpu: 150m
                ephemeral-storage: 2Gi
                memory: 192Mi
              requests:
                cpu: 100m
                ephemeral-storage: 50Mi
                memory: 128Mi
            command:
              - /bin/sh
              - -ec
              - |
                chown 999:999 /temp
                chmod 700 /temp
                find /temp -mindepth 1 -maxdepth 1 -not -name "conf" -not -name ".snapshot" -not -name "lost+found" | \
                  xargs -r chown -R 999:999
              # - sleep 8400
            securityContext:
              runAsGroup: 0
              runAsNonRoot: false
              runAsUser: 0
              seLinuxOptions: {}
              seccompProfile:
                type: RuntimeDefault
            volumeMounts:
              - name: database-data
                mountPath: /temp
                # subPath: database
    redis:
      internal:
        <<: *tolerations-and-nodelectors
    trace:
      enabled: true
      provider: otel
      otel:
        endpoint: opentelemetry-collector.observability.svc.cluster.local:4318
        url_path: /v1/traces
        compression: false
        insecure: true
        # timeout is in seconds
        timeout: 10