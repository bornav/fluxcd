---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: navidrome
  labels:
    app: navidrome-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: navidrome-app
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: navidrome-app
    spec:
      initContainers:
        - name: 'prepare-music'
          image: 'instrumentisto/rsync-ssh:alpine3.18.3'
          command: ["/bin/sh"]  # Override the entrypoint
          args: ["-c", "/startup.sh" ]
          envFrom:
          - secretRef:
              name: home-local-syncthing-env
          securityContext:
            privileged: true
          volumeMounts:
            - name: pv-navidrome-music
              mountPath: /music
            - name: sync-music
              mountPath: /startup.sh
              subPath: startup.sh
        - name: 'prepare-data'
          image: 'instrumentisto/rsync-ssh:alpine3.18.3'
          command: ["/bin/sh"]  # Override the entrypoint
          args: ["-c", "/startup.sh" ]
          envFrom:
          - secretRef:
              name: home-local-syncthing-env
          securityContext:
            privileged: true
          volumeMounts:
            - name: navidrome-data-folder
              mountPath: /data
            - name: prepare-data
              mountPath: /startup.sh
              subPath: startup.sh
      containers:
        - image: bornav/navidrome-bornav-test-cloud-sync:v0.0
          name: navidrome
          env:
            - name: ND_CONFIGFILE
              value: '/config/navidrome.toml'
          resources:
            limits:
              cpu: 1000m
              memory: 500M
          # securityContext:
          #   # runAsGroup: 1000
          #   # runAsUser: 0
          #   privileged: true
          #   # capabilities:
          #   #   add:
          #   #     - NET_ADMIN
          volumeMounts:
            - mountPath: /config/navidrome.toml
              name: navidrome-configuration
              subPath: navidrome.toml
            - name: navidrome-data-folder
              mountPath: /data
            - name: pv-navidrome-music
              mountPath: /music
      volumes:
        - name: navidrome-configuration
          configMap:
            name: navidrome-config
            defaultMode: 0777
        - name: navidrome-data-folder
          persistentVolumeClaim:
            claimName: navidrome-data
        - name: pv-navidrome-music
          persistentVolumeClaim:
            claimName: pv-navidrome-music
        - name: sync-music
          secret:
            secretName: sync-music
            defaultMode: 0777
        - name: prepare-data
          secret:
            secretName: prepare-data
            defaultMode: 0777
      restartPolicy: Always
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: sync-data
spec:
  schedule: "*/15 * * * *"
  jobTemplate:
    spec:
      template:
        spec:
          containers:
            - name: 'sync-data'
              image: 'instrumentisto/rsync-ssh:alpine3.18.3'
              command: ["/bin/sh"]  # Override the entrypoint
              args: ["-c", "/startup.sh" ]
              envFrom:
              - secretRef:
                  name: home-local-syncthing-env
              securityContext:
                privileged: true
              volumeMounts:
                - name: navidrome-data-folder
                  mountPath: /data
                - name: sync-data
                  mountPath: /startup.sh
                  subPath: startup.sh
          volumes:
            - name: sync-data
              secret:
                secretName: sync-data
                defaultMode: 0777
          restartPolicy: Never
# ---
# apiVersion: batch/v1
# kind: Job
# metadata:
#   name: longhorn-restore-job
# spec:
#   template:
#     spec:
#       containers:
#       - name: longhorn-restore
#         image: longhorn/longhorn-engine:latest # Replace with the appropriate Longhorn image
#         command:
#         - "/bin/sh"
#         - "-c"
#         - |
#           if [ -z "$(longhorn snapshot ls --label=navidrome-data -q)" ]; then
#             echo "No snapshot with label 'navidrome-data' found. Skipping restore."
#           else
#             SNAP=$(longhorn snapshot ls --label=navidrome-data -q)
#             echo "Restoring from snapshot: $SNAP"
#             longhorn snapshot restore $SNAP
#           fi
#       restartPolicy: Never
#   backoffLimit: 4 # You can adjust this as needed
# ---
# apiVersion: batch/v1
# kind: CronJob
# metadata:
#   name: longhorn-backup-cron
# spec:
#   schedule: "*/30 * * * *" # Runs every 30 minutes
#   jobTemplate:
#     spec:
#       template:
#         spec:
#           containers:
#           - name: longhorn-backup
#             image: longhorn/longhorn-engine:latest # Replace with the appropriate Longhorn image
#             command:
#             - "/bin/sh"
#             - "-c"
#             - |
#               echo "Creating backup with label 'navidrome-data'..."
#               longhorn snapshot create --label=navidrome-data
#           restartPolicy: Never