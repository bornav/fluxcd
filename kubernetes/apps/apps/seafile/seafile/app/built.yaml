---
# Source: seafile/charts/minio/templates/secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: seafile-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.8.3
    helm.sh/chart: minio-14.7.0
type: Opaque
data:
  root-user: "asd"
  root-password: "asd"
---
# Source: seafile/templates/configmap-storage-classes.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: seafile-storage-classes
data:
  seafile_storage_classes.json: |-
    [
      {
        "storage_id": "S3",
        "name": "S3",
        "is_default": true,
        "commits": {
          "backend": "s3",
          "host": "seafile-minio:9000",
          "use_https": "false",
          "bucket": "seafile-commits",
          "key_id": "asd",
          "key": "asd",
          "path_style_request": true
        },
        "fs": {
          "backend": "s3",
          "host": "seafile-minio:9000",
          "use_https": "false",
          "bucket": "seafile-fs",
          "key_id": "asd",
          "key": "asd",
          "path_style_request": true
        },
        "blocks": {
          "backend": "s3",
          "host": "seafile-minio:9000",
          "use_https": "false",
          "bucket": "seafile-blocks",
          "key_id": "asd",
          "key": "asd",
          "path_style_request": true
        }
      }
    ]
---
# Source: seafile/charts/minio/templates/pvc.yaml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: seafile-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.8.3
    helm.sh/chart: minio-14.7.0
  annotations:
    helm.sh/resource-policy: keep
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: "22Gi"
---
# Source: seafile/charts/elasticsearch/templates/master/svc-headless.yaml
apiVersion: v1
kind: Service
metadata:
  name: seafile-elasticsearch-master-hl
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
    - name: tcp-transport
      port: 9300
      targetPort: transport
  selector:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: seafile/charts/elasticsearch/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: seafile-elasticsearch
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: master
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: tcp-rest-api
      port: 9200
      targetPort: rest-api
      nodePort: null
    - name: tcp-transport
      port: 9300
      nodePort: null
  selector:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/component: master
---
# Source: seafile/charts/mariadb-galera/templates/headless-svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: seafile-mariadb-galera-headless
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb-galera
    app.kubernetes.io/version: 11.4.3
    helm.sh/chart: mariadb-galera-14.0.9
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: galera
      port: 4567
      targetPort: galera
      appProtocol: mysql
    - name: ist
      port: 4568
      targetPort: ist
      appProtocol: mysql
    - name: sst
      port: 4444
      targetPort: sst
      appProtocol: mysql
  publishNotReadyAddresses: true
  selector:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/name: mariadb-galera
---
# Source: seafile/charts/mariadb-galera/templates/svc.yaml
apiVersion: v1
kind: Service
metadata:
  name: seafile-mariadb-galera
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb-galera
    app.kubernetes.io/version: 11.4.3
    helm.sh/chart: mariadb-galera-14.0.9
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: mysql
      port: 3306
      targetPort: mysql
      appProtocol: mysql
      nodePort: null
  selector:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/name: mariadb-galera
---
# Source: seafile/charts/memcached/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: seafile-memcached
  namespace: default
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.29
    helm.sh/chart: memcached-7.4.11
spec:
  type: ClusterIP
  ports:
    - name: memcache
      port: 11211
      targetPort: memcache
      nodePort: null
  selector:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/name: memcached
---
# Source: seafile/charts/minio/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: seafile-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.8.3
    helm.sh/chart: minio-14.7.0
spec:
  type: ClusterIP
  ports:
    - name: minio-api
      port: 9000
      targetPort: minio-api
      nodePort: null
    - name: minio-console
      port: 9001
      targetPort: minio-console
      nodePort: null
  selector:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/name: minio
---
# Source: seafile/templates/seafile-frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: seafile
spec:
  selector:
    app: seafile
  type: ClusterIP
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
---
# Source: seafile/charts/memcached/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seafile-memcached
  namespace: default
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: memcached
    app.kubernetes.io/version: 1.6.29
    helm.sh/chart: memcached-7.4.11
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: seafile
      app.kubernetes.io/name: memcached
  replicas: 1
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: seafile
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: memcached
        app.kubernetes.io/version: 1.6.29
        helm.sh/chart: memcached-7.4.11
      annotations:
    spec:
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: seafile
                    app.kubernetes.io/name: memcached
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: seafile-memcached
      enableServiceLinks: true
      containers:
        - name: memcached
          image: docker.io/bitnami/memcached:1.6.29-debian-12-r4
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MEMCACHED_PORT_NUMBER
              value: "11211"
          ports:
            - name: memcache
              containerPort: 11211
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - pgrep
                - memcached
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 5
            successThreshold: 1
            timeoutSeconds: 3
            tcpSocket:
              port: memcache
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /opt/bitnami/memcached/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
      volumes:
        - name: empty-dir
          emptyDir: {}
---
# Source: seafile/charts/minio/templates/standalone/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seafile-minio
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.8.3
    helm.sh/chart: minio-14.7.0
spec:
  selector:
    matchLabels:
      app.kubernetes.io/instance: seafile
      app.kubernetes.io/name: minio
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: seafile
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: minio
        app.kubernetes.io/version: 2024.8.3
        helm.sh/chart: minio-14.7.0
      annotations:
        checksum/credentials-secret: asd
    spec:
      
      serviceAccountName: seafile-minio
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: seafile
                    app.kubernetes.io/name: minio
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      automountServiceAccountToken: false
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
        supplementalGroups: []
        sysctls: []
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2024.8.3-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_FORCE_NEW_KEYS
              value: "no"
            - name: MINIO_API_PORT_NUMBER
              value: "9000"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: seafile-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: seafile-minio
                  key: root-password
            - name: MINIO_BROWSER
              value: "off"
            - name: MINIO_PROMETHEUS_AUTH_TYPE
              value: "public"
            - name: MINIO_CONSOLE_PORT_NUMBER
              value: "9001"
            - name: MINIO_DATA_DIR
              value: "/bitnami/minio/data"
          envFrom:
          ports:
            - name: minio-api
              containerPort: 9000
              protocol: TCP
            - name: minio-console
              containerPort: 9001
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: minio-api
              scheme: "HTTP"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            tcpSocket:
              port: minio-api
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 5
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/minio/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /.mc
              subPath: app-mc-dir
            - name: data
              mountPath: /bitnami/minio/data
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: data
          persistentVolumeClaim:
            claimName: seafile-minio
---
# Source: seafile/templates/seafile-backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seafile-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: seafile-backend
  template:
    metadata:
      labels:
        app: seafile-backend
    spec:
      containers:
        - name: seafile-backend
          image: datamate/seafile-professional:11.0.14
          imagePullPolicy: Always
          env:
            - name: DB_HOST
              value: "seafile-mariadb-galera"
            - name: DB_USER
              value: "root"
            - name: DB_PORT
              value: "3306"
            - name: DB_ROOT_PASSWD
              value: "topsecret"
            - name: TIME_ZONE
              value: "Europe/Vienna"
            - name: SEAFILE_ADMIN_EMAIL
              value: "admin@seafile.com"
            - name: SEAFILE_ADMIN_PASSWORD
              value: "topsecret"
            - name: SEAFILE_LOG_TO_STDOUT
              value: "true"
            - name: SEAFILE_LOG_LEVEL
              value: "WARNING"
            - name: SEAFILE_SERVER_LETSENCRYPT
              value: "false"
            - name: SEAFILE_SERVER_HOSTNAME
              value: "localhost"
            - name: SEAFILE__notification__jwt_private_key
              value: "topsecret"
            - name: SEAHUB__SECRET_KEY
              value: "topsecret"
            - name: FORCE_HTTPS_IN_CONF
              value: "true"
            - name: SEAHUB__CACHE_HOST
              value: "seafile-memcached"
            - name: SEAHUB__CACHE_PORT
              value: "11211"
            - name: SEAFILE__memcached__memcached_options
              value: "--SERVER=seafile-memcached --POOL-MIN=10 --POOL-MAX=100"
            - name: SEAFILE__storage__enable_storage_classes
              value: "true"
            - name: SEAFILE__storage__storage_classes_file
              value: "/opt/seafile/seafile_storage_classes.json"
            - name: SEAFEVENTS__INDEX0x20FILES__es_host
              value: "seafile-elasticsearch"
            - name: SEAFEVENTS__INDEX0x20FILES__es_port
              value: "9200"
            - name: REQUESTS_CA_BUNDLE
              value: "/etc/ssl/certs/ca-certificates.crt"
            - name: "SEAFILE__cluster__enabled"
              value: "true"
            - name: "CLUSTER_SERVER"
              value: "true"
            - name: "CLUSTER_MODE"
              value: "backend"
          volumeMounts:
            - name: seafile-license
              mountPath: /shared/seafile/seafile-license.txt
              subPath: seafile-license.txt
              readOnly: true
            - name: seafile-storage-classes
              mountPath: /opt/seafile/seafile_storage_classes.json
              subPath: seafile_storage_classes.json
              readOnly: true
      volumes:
        - name: seafile-tmp
          emptyDir:
            sizeLimit: 100Mi
        
        - name: seafile-license
          secret:
            secretName: seafile-license
            items:
              - key: seafile-license.txt
                path: seafile-license.txt
        - name: seafile-storage-classes
          configMap:
            name: seafile-storage-classes
---
# Source: seafile/templates/seafile-frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: seafile
spec:
  replicas: 2
  selector:
    matchLabels:
      app: seafile
  template:
    metadata:
      labels:
        app: seafile
    spec:
      containers:
        - name: seafile
          image: datamate/seafile-professional:11.0.14
          imagePullPolicy: Always
          env:
            - name: DB_HOST
              value: "seafile-mariadb-galera"
            - name: DB_USER
              value: "root"
            - name: DB_PORT
              value: "3306"
            - name: DB_ROOT_PASSWD
              value: "topsecret"
            - name: TIME_ZONE
              value: "Europe/Vienna"
            - name: SEAFILE_ADMIN_EMAIL
              value: "admin@seafile.com"
            - name: SEAFILE_ADMIN_PASSWORD
              value: "topsecret"
            - name: SEAFILE_LOG_TO_STDOUT
              value: "true"
            - name: SEAFILE_LOG_LEVEL
              value: "WARNING"
            - name: SEAFILE_SERVER_LETSENCRYPT
              value: "false"
            - name: SEAFILE_SERVER_HOSTNAME
              value: "localhost"
            - name: SEAFILE__notification__jwt_private_key
              value: "topsecret"
            - name: SEAHUB__SECRET_KEY
              value: "topsecret"
            - name: FORCE_HTTPS_IN_CONF
              value: "true"
            - name: SEAHUB__CACHE_HOST
              value: "seafile-memcached"
            - name: SEAHUB__CACHE_PORT
              value: "11211"
            - name: SEAFILE__memcached__memcached_options
              value: "--SERVER=seafile-memcached --POOL-MIN=10 --POOL-MAX=100"
            - name: SEAFILE__storage__enable_storage_classes
              value: "true" 
            - name: SEAFILE__storage__storage_classes_file
              value: "/opt/seafile/seafile_storage_classes.json"
            - name: SEAFEVENTS__INDEX0x20FILES__es_host
              value: "seafile-elasticsearch"
            - name: SEAFEVENTS__INDEX0x20FILES__es_port
              value: "9200"
            - name: REQUESTS_CA_BUNDLE
              value: "/etc/ssl/certs/ca-certificates.crt"
            - name: "SEAFILE__cluster__enabled"
              value: "true"
            - name: "CLUSTER_SERVER"
              value: "true"
            - name: "CLUSTER_MODE"
              value: "frontend"
          volumeMounts:
            - name: seafile-license
              mountPath: /shared/seafile/seafile-license.txt
              subPath: seafile-license.txt
              readOnly: true
            - name: seafile-storage-classes
              mountPath: /opt/seafile/seafile_storage_classes.json
              subPath: seafile_storage_classes.json
              readOnly: true
          ports:
            - containerPort: 80
          readinessProbe:
            httpGet:
              path: /api2/ping
              port: 80
            initialDelaySeconds: 3
            periodSeconds: 3
      volumes:
        - name: seafile-tmp
          emptyDir:
            sizeLimit: 100Mi
        
        - name: seafile-license
          secret:
            secretName: seafile-license
            items:
              - key: seafile-license.txt
                path: seafile-license.txt
        - name: seafile-storage-classes
          configMap:
            name: seafile-storage-classes
---
# Source: seafile/charts/elasticsearch/templates/master/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: seafile-elasticsearch-master
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: elasticsearch
    app.kubernetes.io/version: 8.12.1
    helm.sh/chart: elasticsearch-19.17.6
    app.kubernetes.io/component: master
    ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
    app: master
spec:
  replicas: 1
  podManagementPolicy: Parallel
  selector:
    matchLabels:
      app.kubernetes.io/instance: seafile
      app.kubernetes.io/name: elasticsearch
      app.kubernetes.io/component: master
  serviceName: seafile-elasticsearch-master-hl
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: seafile
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: elasticsearch
        app.kubernetes.io/version: 8.12.1
        helm.sh/chart: elasticsearch-19.17.6
        app.kubernetes.io/component: master
        ## Istio Labels: https://istio.io/docs/ops/deployment/requirements/
        app: master
      annotations:
    spec:
      serviceAccountName: seafile-elasticsearch-master
      
      automountServiceAccountToken: false
      affinity:
        podAffinity:
          
        podAntiAffinity:
          
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        ## Image that performs the sysctl operation to modify Kernel settings (needed sometimes to avoid boot errors)
        - name: sysctl
          image: docker.io/bitnami/os-shell:12-debian-12-r51
          imagePullPolicy: "IfNotPresent"
          command:
            - /bin/bash
            - -ec
            - |
              CURRENT=`sysctl -n vm.max_map_count`;
              DESIRED="262144";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w vm.max_map_count=262144;
              fi;
              CURRENT=`sysctl -n fs.file-max`;
              DESIRED="65536";
              if [ "$DESIRED" -gt "$CURRENT" ]; then
                  sysctl -w fs.file-max=65536;
              fi;
          securityContext:
            privileged: true
            runAsUser: 0
          resources:
            limits: {}
            requests: {}
      containers:
        - name: elasticsearch
          image: docker.io/bitnami/elasticsearch:8.12.1-debian-11-r2
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsNonRoot: true
            runAsUser: 1001
            seccompProfile:
              type: RuntimeDefault
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: ELASTICSEARCH_IS_DEDICATED_NODE
              value: "no"
            - name: ELASTICSEARCH_NODE_ROLES
              value: "master"
            - name: ELASTICSEARCH_TRANSPORT_PORT_NUMBER
              value: "9300"
            - name: ELASTICSEARCH_HTTP_PORT_NUMBER
              value: "9200"
            - name: ELASTICSEARCH_CLUSTER_NAME
              value: "seafile-elasticsearch"
            
            - name: ELASTICSEARCH_HEAP_SIZE
              value: "512m"
          ports:
            - name: rest-api
              containerPort: 9200
            - name: transport
              containerPort: 9300
          livenessProbe:
            failureThreshold: 5
            initialDelaySeconds: 180
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            tcpSocket:
              port: rest-api
          readinessProbe:
            failureThreshold: 5
            initialDelaySeconds: 90
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /opt/bitnami/scripts/elasticsearch/healthcheck.sh
          resources:
            limits: {}
            requests: {}
          volumeMounts:
            - name: data
              mountPath: /bitnami/elasticsearch/data
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: "data"
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: seafile/charts/mariadb-galera/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: seafile-mariadb-galera
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: mariadb-galera
    app.kubernetes.io/version: 11.4.3
    helm.sh/chart: mariadb-galera-14.0.9
spec:
  podManagementPolicy: OrderedReady
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/instance: seafile
      app.kubernetes.io/name: mariadb-galera
  serviceName: seafile-mariadb-galera-headless
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/config: asd
      labels:
        app.kubernetes.io/instance: seafile
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: mariadb-galera
        app.kubernetes.io/version: 11.4.3
        helm.sh/chart: mariadb-galera-14.0.9
    spec:
      
      automountServiceAccountToken: false
      serviceAccountName: seafile-mariadb-galera
      affinity:
        podAffinity:
          
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/instance: seafile
                    app.kubernetes.io/name: mariadb-galera
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:
          
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      initContainers:
        - name: preserve-logs-symlinks
          image: docker.io/bitnami/mariadb-galera:11.4.3-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          command:
            - /bin/bash
          args:
            - -ec
            - |
              #!/bin/bash

              . /opt/bitnami/scripts/libfs.sh
              # We copy the logs folder because it has symlinks to stdout and stderr
              if ! is_dir_empty /opt/bitnami/mariadb/logs; then
                cp -r /opt/bitnami/mariadb/logs /emptydir/app-logs-dir
              fi
          volumeMounts:
            - name: empty-dir
              mountPath: /emptydir
      containers:
        - name: "mariadb-galera"
          image: docker.io/bitnami/mariadb-galera:11.4.3-debian-12-r0
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - bash
            - -ec
            - |
                exec /opt/bitnami/scripts/mariadb-galera/entrypoint.sh /opt/bitnami/scripts/mariadb-galera/run.sh
          env:
            - name: MY_POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: BITNAMI_DEBUG
              value: "false"
            - name: MARIADB_DEFAULT_PORT_NUMBER
              value: "3306"
            - name: MARIADB_GALERA_CLUSTER_NAME
              value: "galera"
            - name: MARIADB_GALERA_CLUSTER_ADDRESS
              value: "gcomm://seafile-mariadb-galera-0.seafile-mariadb-galera-headless.default.svc.cluster.local,seafile-mariadb-galera-1.seafile-mariadb-galera-headless.default.svc.cluster.local,seafile-mariadb-galera-2.seafile-mariadb-galera-headless.default.svc.cluster.local"
            - name: MARIADB_ROOT_USER
              value: "root"
            - name: MARIADB_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: seafile-mariadb-galera
                  key: mariadb-root-password
            - name: MARIADB_DATABASE
              value: "my_database"
            - name: MARIADB_GALERA_MARIABACKUP_USER
              value: "mariabackup"
            - name: MARIADB_GALERA_MARIABACKUP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: seafile-mariadb-galera
                  key: mariadb-galera-mariabackup-password
            - name: MARIADB_ENABLE_LDAP
              value: "no"
            - name: MARIADB_ENABLE_TLS
              value: "no"
          ports:
            - name: mysql
              containerPort: 3306
            - name: galera
              containerPort: 4567
            - name: ist
              containerPort: 4568
            - name: sst
              containerPort: 4444
          livenessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  exec mysql -u"${MARIADB_ROOT_USER}" -p"${password_aux}" -e "select * from mysql.wsrep_cluster_members;"
            initialDelaySeconds: 120
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - bash
                - -ec
                - |
                  password_aux="${MARIADB_ROOT_PASSWORD:-}"
                  if [[ -f "${MARIADB_ROOT_PASSWORD_FILE:-}" ]]; then
                      password_aux=$(cat "$MARIADB_ROOT_PASSWORD_FILE")
                  fi
                  exec mysqladmin status -u"${MARIADB_ROOT_USER}" -p"${password_aux}"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 1
            successThreshold: 1
            failureThreshold: 3
          resources:
            limits:
              cpu: 375m
              ephemeral-storage: 2Gi
              memory: 384Mi
            requests:
              cpu: 250m
              ephemeral-storage: 50Mi
              memory: 256Mi
          volumeMounts:
            - name: previous-boot
              mountPath: /opt/bitnami/mariadb/.bootstrap
            - name: data
              mountPath: /bitnami/mariadb
            - name: mariadb-galera-config
              mountPath: /bitnami/conf/my.cnf
              subPath: my.cnf
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/conf
              subPath: app-conf-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /opt/bitnami/mariadb/logs
              subPath: app-logs-dir
      volumes:
        - name: previous-boot
          emptyDir: {}
        - name: mariadb-galera-config
          configMap:
            name: seafile-mariadb-galera-configuration
        - name: empty-dir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app.kubernetes.io/instance: seafile
          app.kubernetes.io/name: mariadb-galera
          app.kubernetes.io/managed-by: Helm
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
---
# Source: seafile/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: seafile-ingress
  annotations:
    cert-manager.io/issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/proxy-body-size: 100m
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  ingressClassName: "nginx"
  tls:
    - hosts:
        - "localhost"
      secretName: seafile-tls-secret
  rules:
    - host: "localhost"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: seafile
                port:
                  number: 80
---
# Source: seafile/charts/minio/templates/provisioning-job.yaml
apiVersion: batch/v1
kind: Job
metadata:
  name: seafile-minio-provisioning
  namespace: "default"
  labels:
    app.kubernetes.io/instance: seafile
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: minio
    app.kubernetes.io/version: 2024.8.3
    helm.sh/chart: minio-14.7.0
    app.kubernetes.io/component: minio-provisioning
  annotations:
    helm.sh/hook: post-install,post-upgrade
    helm.sh/hook-delete-policy: before-hook-creation
spec: 
  parallelism: 1
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/version: 2024.8.3
        helm.sh/chart: minio-14.7.0
        app.kubernetes.io/component: minio-provisioning
    spec:
      
      restartPolicy: OnFailure
      terminationGracePeriodSeconds: 0
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: seafile-minio
      initContainers:
        - name: wait-for-available-minio
          image: docker.io/bitnami/minio:2024.8.3-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
            - -c
            - |-
              set -e;
              echo "Waiting for Minio";
              wait-for-port \
                --host=seafile-minio \
                --state=inuse \
                --timeout=120 \
                9000;
              echo "Minio is available";
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
      containers:
        - name: minio
          image: docker.io/bitnami/minio:2024.8.3-debian-12-r1
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          command:
            - /bin/bash
            - -c
            - >-
              set -e;
              echo "Start Minio provisioning";

              function attachPolicy() {
                local tmp=$(mc admin $1 info provisioning $2 | sed -n -e 's/^Policy.*: \(.*\)$/\1/p');
                IFS=',' read -r -a CURRENT_POLICIES <<< "$tmp";
                if [[ ! "${CURRENT_POLICIES[*]}" =~ "$3" ]]; then
                  mc admin policy attach provisioning $3 --$1=$2;
                fi;
              };

              function detachDanglingPolicies() {
                local tmp=$(mc admin $1 info provisioning $2 | sed -n -e 's/^Policy.*: \(.*\)$/\1/p');
                IFS=',' read -r -a CURRENT_POLICIES <<< "$tmp";
                IFS=',' read -r -a DESIRED_POLICIES <<< "$3";
                for current in "${CURRENT_POLICIES[@]}"; do
                  if [[ ! "${DESIRED_POLICIES[*]}" =~ "${current}" ]]; then
                    mc admin policy detach provisioning $current --$1=$2;
                  fi;
                done;
              }

              function addUsersFromFile() {
                local username=$(grep -oP '^username=\K.+' $1);
                local password=$(grep -oP '^password=\K.+' $1);
                local disabled=$(grep -oP '^disabled=\K.+' $1);
                local policies_list=$(grep -oP '^policies=\K.+' $1);
                local set_policies=$(grep -oP '^setPolicies=\K.+' $1);

                mc admin user add provisioning "${username}" "${password}";

                IFS=',' read -r -a POLICIES <<< "${policies_list}";
                for policy in "${POLICIES[@]}"; do
                  attachPolicy user "${username}" "${policy}";
                done;
                if [ "${set_policies}" == "true" ]; then
                  detachDanglingPolicies user "${username}" "${policies_list}";
                fi;

                local user_status="enable";
                if [[ "${disabled}" != "" && "${disabled,,}" == "true" ]]; then
                  user_status="disable";
                fi;

                mc admin user "${user_status}" provisioning "${username}";
              };
              mc alias set provisioning $MINIO_SCHEME://seafile-minio:9000 $MINIO_ROOT_USER $MINIO_ROOT_PASSWORD;

              mc admin service restart provisioning --wait --json;
              mc mb provisioning/seafile-blocks --ignore-existing  ;
              mc version suspend provisioning/seafile-blocks;
              mc mb provisioning/seafile-commits --ignore-existing  ;
              mc version suspend provisioning/seafile-commits;
              mc mb provisioning/seafile-fs --ignore-existing  ;
              mc version suspend provisioning/seafile-fs;

              echo "End Minio provisioning";
          env:
            - name: MINIO_SCHEME
              value: "http"
            - name: MINIO_ROOT_USER
              valueFrom:
                secretKeyRef:
                  name: seafile-minio
                  key: root-user
            - name: MINIO_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: seafile-minio
                  key: root-password
          envFrom:
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          volumeMounts:
            - name: empty-dir
              mountPath: /.mc
              subPath: app-mc-dir
            - name: empty-dir
              mountPath: /opt/bitnami/minio/tmp
              subPath: app-tmp-dir
            - name: empty-dir
              mountPath: /tmp
              subPath: tmp-dir
            - name: minio-provisioning
              mountPath: /etc/ilm
      volumes:
        - name: empty-dir
          emptyDir: {}
        - name: minio-provisioning
          configMap:
            name: seafile-minio-provisioning
