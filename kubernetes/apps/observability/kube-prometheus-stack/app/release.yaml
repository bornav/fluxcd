apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 61.3.2
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  values:
    nameOverride: "prometheus"
    namespaceOverride: "monitoring"
    crds:
      enabled: true
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        configReloaders: true
        general: true
        k8sContainerCpuUsageSecondsTotal: true
        k8sContainerMemoryCache: true
        k8sContainerMemoryRss: true
        k8sContainerMemorySwap: true
        k8sContainerResource: true
        k8sContainerMemoryWorkingSetBytes: true
        k8sPodOwner: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubeControllerManager: true
        kubelet: true
        kubeProxy: true
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeSchedulerAlerting: true
        kubeSchedulerRecording: true
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true
        windows: true

    alertmanager:
      enabled: true
      ingress:
        enabled: true
        ingressClassName: traefik-external
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: network-forward-auth@kubernetescrd
        labels: {}
        hosts:
        - alertmanager.cloud.icylair.com
        paths:
        - /
        tls:
        - hosts:
          - alertmanager.cloud.icylair.com
          secretName: icylair-com-all-prod
    grafana:
      enabled: true
      defaultDashboardsTimezone: Europe/Vienna
      defaultDashboardsEditable: true
      # admin:
      #   existingSecret: grafana-admin-credentials
      #   userKey: admin-user
      #   passwordKey: admin-password
      adminPassword: prom-operator
      ingress:
        enabled: true
        ingressClassName: traefik-external
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: network-forward-auth@kubernetescrd
        hosts:
        - grafana.cloud.icylair.com

        ## Path for grafana ingress
        path: /
        tls:
        - hosts:
          - grafana.cloud.icylair.com
          secretName: icylair-com-all-prod

      # # To make Grafana persistent (Using Statefulset)
      # #
      persistence:
        enabled: true
        type: sts
        storageClassName: "longhorn-storage"
        accessModes:
          - ReadWriteOnce
        size: 20Gi
        # finalizers:
          # - kubernetes.io/pvc-protection

    ## Component scraping coreDns. Use either this or kubeDns
    ##
    coreDns:
      enabled: true
      service:
        enabled: true
        port: 9153
        targetPort: 9153
        # selector:
        #   k8s-app: kube-dns
      serviceMonitor:
        enabled: true
        interval: ""
        sampleLimit: 0
        targetLimit: 0
        labelLimit: 0
        labelNameLengthLimit: 0
        labelValueLengthLimit: 0
        proxyUrl: ""
        port: http-metrics
        jobLabel: jobLabel
    kubeProxy:
      enabled: false

    prometheus:
      enabled: true
      agentMode: false
      annotations: {}
      networkPolicy:
        enabled: true
        ## Flavor of the network policy to use.
        #  Can be:
        #  * kubernetes for networking.k8s.io/v1/NetworkPolicy
        #  * cilium     for cilium.io/v2/CiliumNetworkPolicy
        flavor: cilium
        # cilium:
        #   endpointSelector:
        #   egress:
        #   ingress:
        # egress:
        # - {}
        # ingress:
        # - {}
        # podSelector:
        #   matchLabels:
        #     app: prometheus
      ## Service account for Prometheuses to use.
      serviceAccount:
        create: true
        name: ""
        annotations: {}
        automountServiceAccountToken: true
      ingress:
        enabled: true
        ingressClassName: traefik-external
        # annotations:
        # traefik.ingress.kubernetes.io/router.middlewares: network-forward-auth@kubernetescrd
        hosts:
        - prometheus.cloud.icylair.com
        path: /
        tls:
        - hosts:
          - prometheus.cloud.icylair.com
          secretName: icylair-com-all-prod
      containers: []
      # containers:
      # - name: oauth-proxy
      #   image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
      #   args:
      #   - --upstream=http://127.0.0.1:9090
      #   - --http-address=0.0.0.0:8081
      #   - --metrics-address=0.0.0.0:8082
      #   - ...
      #   ports:
      #   - containerPort: 8081
      #     name: oauth-proxy
      #     protocol: TCP
      #   - containerPort: 8082
      #     name: oauth-metrics
      #     protocol: TCP
      #   resources: {}

    ## Setting to true produces cleaner resource names, but requires a data migration because the name of the persistent volume changes. Therefore this should only be set once on initial installation.
    ##
    cleanPrometheusOperatorObjectNames: false

    ## Extra manifests to deploy as an array
    extraManifests: []
    # - apiVersion: v1
    #   kind: ConfigMap
    #   metadata:
    #   labels:
    #     name: prometheus-extra
    #   data:
    #     extra-data: "value"
