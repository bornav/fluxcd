apiVersion: helm.toolkit.fluxcd.io/v2beta2
kind: HelmRelease
metadata:
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  interval: 30m
  timeout: 15m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 58.4.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community
        namespace: flux-system
  maxHistory: 2
  install:
    createNamespace: true
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      retries: 3
  uninstall:
    keepHistory: false
  # dependsOn:
  #   - name: local-path-provisioner
  #     namespace: kube-system
  values:
    nameOverride: "prometheus"
    namespaceOverride: "monitoring"
    ## Install Prometheus Operator CRDs
    crds:
      enabled: true
    ## Create default rules for monitoring the cluster
    ##
    defaultRules:
      create: true
      rules:
        alertmanager: true
        etcd: true
        configReloaders: true
        general: true
        k8sContainerCpuUsageSecondsTotal: true
        k8sContainerMemoryCache: true
        k8sContainerMemoryRss: true
        k8sContainerMemorySwap: true
        k8sContainerResource: true
        k8sContainerMemoryWorkingSetBytes: true
        k8sPodOwner: true
        kubeApiserverAvailability: true
        kubeApiserverBurnrate: true
        kubeApiserverHistogram: true
        kubeApiserverSlos: true
        kubeControllerManager: true
        kubelet: true
        kubeProxy: true
        kubePrometheusGeneral: true
        kubePrometheusNodeRecording: true
        kubernetesApps: true
        kubernetesResources: true
        kubernetesStorage: true
        kubernetesSystem: true
        kubeSchedulerAlerting: true
        kubeSchedulerRecording: true
        kubeStateMetrics: true
        network: true
        node: true
        nodeExporterAlerting: true
        nodeExporterRecording: true
        prometheus: true
        prometheusOperator: true
        windows: true

    alertmanager:
      ## Deploy alertmanager
      ##
      enabled: true

      ingress:
        enabled: true
        ingressClassName: traefik-external
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: network-forward-auth@kubernetescrd
        labels: {}
        hosts:
        - alertmanager.cloud.icylair.com
        paths:
        - /
        tls:
        - hosts:
          - alertmanager.cloud.icylair.com
          secretName: icylair-com-all-prod
    ## Using default values from https://github.com/grafana/helm-charts/blob/main/charts/grafana/values.yaml
    ##
    grafana:
      enabled: true
      defaultDashboardsTimezone: Europe/Vienna
      defaultDashboardsEditable: true
      # admin:
      #   existingSecret: grafana-admin-credentials
      #   userKey: admin-user
      #   passwordKey: admin-password
      adminPassword: prom-operator
      # rbac:
      #   ## If true, Grafana PSPs will be created
      #   pspEnabled: false
      ingress:
        enabled: true
        ingressClassName: traefik-external
        annotations:
          traefik.ingress.kubernetes.io/router.middlewares: network-forward-auth@kubernetescrd
        hosts:
        - grafana.cloud.icylair.com

        ## Path for grafana ingress
        path: /
        tls:
        - hosts:
          - grafana.cloud.icylair.com
          secretName: icylair-com-all-prod

      # # To make Grafana persistent (Using Statefulset)
      # #
      # persistence:
      #   enabled: true
      #   type: sts
      #   storageClassName: "storageClassName"
      #   accessModes:
      #     - ReadWriteOnce
      #   size: 20Gi
      #   finalizers:
      #     - kubernetes.io/pvc-protection

    ## Component scraping coreDns. Use either this or kubeDns
    ##
    coreDns:
      enabled: true
      service:
        enabled: true
        port: 9153
        targetPort: 9153
        # selector:
        #   k8s-app: kube-dns
      serviceMonitor:
        enabled: true
        ## Scrape interval. If not set, the Prometheus default scrape interval is used.
        ##
        interval: ""

        ## SampleLimit defines per-scrape limit on number of scraped samples that will be accepted.
        ##
        sampleLimit: 0

        ## TargetLimit defines a limit on the number of scraped targets that will be accepted.
        ##
        targetLimit: 0

        ## Per-scrape limit on number of labels that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        ##
        labelLimit: 0

        ## Per-scrape limit on length of labels name that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        ##
        labelNameLengthLimit: 0

        ## Per-scrape limit on length of labels value that will be accepted for a sample. Only valid in Prometheus versions 2.27.0 and newer.
        ##
        labelValueLengthLimit: 0

        ## proxyUrl: URL of a proxy that should be used for scraping.
        ##
        proxyUrl: ""

        ## port: Name of the port the metrics will be scraped from
        ##
        port: http-metrics

        jobLabel: jobLabel
        selector: {}
        #  matchLabels:
        #    k8s-app: kube-dns

        ## MetricRelabelConfigs to apply to samples after scraping, but before ingestion.
        ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
        ##
        metricRelabelings: []
        # - action: keep
        #   regex: 'kube_(daemonset|deployment|pod|namespace|node|statefulset).+'
        #   sourceLabels: [__name__]

        ## RelabelConfigs to apply to samples before scraping
        ## ref: https://github.com/prometheus-operator/prometheus-operator/blob/main/Documentation/api.md#relabelconfig
        ##
        relabelings: []
        # - sourceLabels: [__meta_kubernetes_pod_node_name]
        #   separator: ;
        #   regex: ^(.*)$
        #   targetLabel: nodename
        #   replacement: $1
        #   action: replace

        ## Additional labels
        ##
        additionalLabels: {}
        #  foo: bar
    ## Component scraping kube proxy
    ##
    kubeProxy:
      enabled: false

    ## Deploy a Prometheus instance
    ##
    prometheus:
      enabled: true
      agentMode: false
      annotations: {}
      ## Configure network policy for the prometheus
      networkPolicy:
        enabled: true
        ## Flavor of the network policy to use.
        #  Can be:
        #  * kubernetes for networking.k8s.io/v1/NetworkPolicy
        #  * cilium     for cilium.io/v2/CiliumNetworkPolicy
        # flavor: cilium
        # cilium:
        #   endpointSelector:
        #   egress:
        #   ingress:
        # egress:
        # - {}
        # ingress:
        # - {}
        # podSelector:
        #   matchLabels:
        #     app: prometheus
      ## Service account for Prometheuses to use.
      serviceAccount:
        create: true
        name: ""
        annotations: {}
        automountServiceAccountToken: true
      ingress:
        enabled: true
        ingressClassName: traefik-external
        # annotations:
        # traefik.ingress.kubernetes.io/router.middlewares: network-forward-auth@kubernetescrd
        hosts:
        - prometheus.cloud.icylair.com
        path: /
        tls:
        - hosts:
          - prometheus.cloud.icylair.com
          secretName: icylair-com-all-prod
      containers: []
      # containers:
      # - name: oauth-proxy
      #   image: quay.io/oauth2-proxy/oauth2-proxy:v7.5.1
      #   args:
      #   - --upstream=http://127.0.0.1:9090
      #   - --http-address=0.0.0.0:8081
      #   - --metrics-address=0.0.0.0:8082
      #   - ...
      #   ports:
      #   - containerPort: 8081
      #     name: oauth-proxy
      #     protocol: TCP
      #   - containerPort: 8082
      #     name: oauth-metrics
      #     protocol: TCP
      #   resources: {}

    ## Setting to true produces cleaner resource names, but requires a data migration because the name of the persistent volume changes. Therefore this should only be set once on initial installation.
    ##
    cleanPrometheusOperatorObjectNames: false

    ## Extra manifests to deploy as an array
    extraManifests: []
    # - apiVersion: v1
    #   kind: ConfigMap
    #   metadata:
    #   labels:
    #     name: prometheus-extra
    #   data:
    #     extra-data: "value"
